# if you ran into trouble, try seting wxRoot, glewRoot and boostRoot to the root directories of the assosiated libraries.
# please set them from a different CMakeLists file, and call add_subdirectory on this project directorie.
#
# wxwidgets - wxRoot - REQUIRED 
# glew - glewRoot - REQUIRED 
# boost - boostRoot - optioanall 
#
# for MinGW builds:
# cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=<Debug/Release ... etk> -B <target dir>
# for msvc build:
# cmake -B <target dir> --config <Debug/release ... etk>


project(3d-laser-room)
cmake_minimum_required(VERSION 2.8)
aux_source_directory(. SRC_LIST)

add_executable(${PROJECT_NAME} ${SRC_LIST})
target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)

find_package(OpenGL REQUIRED)
target_link_libraries(${PROJECT_NAME} opengl32)

# wxwidgets
find_package(wxWidgets COMPONENTS core base gl)
if(wxWidgets_FOUND)
	include(${wxWidgets_USE_FILE})	
	target_link_libraries(${PROJECT_NAME} ${wxWidgets_LIBRARIES})
else()
	if(EXISTS ${wxRoot})
		file(GLOB wxlib "${wxRoot}/lib/*.a")
		
		include_directories(${PROJECT_NAME} PRIVATE "${wxRoot}/include")
		target_link_libraries(${PROJECT_NAME} ${wxlib})
		
		target_include_directories(${PROJECT_NAME} PRIVATE "${wxRoot}/lib/wx/include/msw-unicode-3.1")
		target_include_directories(${PROJECT_NAME} PRIVATE "C:/danny/3d/3d-laser-room")
	elseif()
		message(FATAL_ERROR "wxWidgets REQUIRED, cannot find wxWidgets, try to set wxRoot to wxWidgets root directorie")
	endif(EXISTS ${wxRoot})
endif(wxWidgets_FOUND)


# glew
# glew doesn't play well with cmake, this is a workaround. 
# works on win10, Visual Studio 16 2019 compiler and minGW compiler, cmake version 3.16.3.
# it just gets the glew installd path from ${GLEW_DIR} and uses it afterward.
find_package(glew)
if(GLEW_FOUND)
	set(glew_dir2 ${GLEW_DIR})
	string(REPLACE "/lib/cmake/glew" "" glew_dir2 ${GLEW_DIR})
	target_include_directories(${PROJECT_NAME} PRIVATE ${glew_dir2}/include)
	target_link_libraries(${PROJECT_NAME} ${glew_dir2}/lib/*.lib)
else()
	if(EXISTS ${glewRoot})
		include_directories(${PROJECT_NAME} PRIVATE "${glewRoot}/include")
		file(GLOB glewlib "${glewRoot}/lib/*.a")
		target_link_libraries(${PROJECT_NAME} ${glewlib})
	elseif()
		message(FATAL_ERROR "glew REQUIRED, cannot find glew, try to set glewRoot to glew root directorie")
	endif()
endif(GLEW_FOUND)


find_package(boost)
if(NOT BOOST_FOUND)
	if(EXISTS ${boostRoot})
		target_include_directories(${PROJECT_NAME} PRIVATE ${boostRoot})
	elseif()
		message(STATUS "cannot find boostRoot, try to set boostRoot to boost root directorie")
	endif()
endif(EXISTS BOOST_FOUND)


# in case release, compiles as desktop app. debug gets a console.
if(NOT MINGW AND WIN32)
	target_link_options(${PROJECT_NAME} PUBLIC "$<$<CONFIG:Release>:/SUBSYSTEM:WINDOWS>")
endif()


# precompile pch.h
target_precompile_headers(${PROJECT_NAME} PRIVATE pch.h)




