project(3d-laser-room)
cmake_minimum_required(VERSION 2.8)
#aux_source_directory(. SRC_LIST)

add_executable(${PROJECT_NAME} Main.cpp)
#add_executable(${PROJECT_NAME} ${SRC_LIST})

# wxwidgets
find_package(wxWidgets REQUIRED COMPONENTS core base gl)
include(${wxWidgets_USE_FILE})	
target_link_libraries(${PROJECT_NAME} ${wxWidgets_LIBRARIES})

# glew
# glew doesn't play well with cmake, this is a workaround. 
# works on win10, Visual Studio 16 2019 compiler, cmake version 3.16.3.
# it just gets the glew installd path from ${GLEW_DIR} and uses it afterward.
find_package(glew REQUIRED)
set(glew_dir2 ${GLEW_DIR})
string(REPLACE "/lib/cmake/glew" "" glew_dir2 ${GLEW_DIR})
target_include_directories(${PROJECT_NAME} PRIVATE ${glew_dir2}/include)
target_link_libraries(${PROJECT_NAME} ${glew_dir2}/lib/*.lib)

# in case release, compiles as desktop app. debug gets a console.
#if(WIN32)
#	target_link_options(${PROJECT_NAME} PUBLIC "$<$<CONFIG:Release>:/SUBSYSTEM:WINDOWS>")
#endif(WIN32)
#

# precompile pch.h
target_precompile_headers(${PROJECT_NAME} PRIVATE pch.h)




